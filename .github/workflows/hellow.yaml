# name: Contexts
# on: push
# jobs:   
#     print:
#         runs-on: ubuntu-latest
#         steps: 
#             - run: echo "${{ github.actor }}"

## コード3.2
# name: Environment variables
# on: push
# jobs:
#     run:
#         runs-on: ubuntu-latest
#         env:
#             BRANCH: main
#         steps:
#             - run: echo "${BRANCH}"
#             - uses: actions/checkout@v4
#               with:
#                 ref: ${{ env.BRANCH }}

## コード3.3
# name: Override environment variables
# on: push
# env:
#     EXAMPLE: Defined by workflow level
# jobs:
#     print:
#         runs-on: ubuntu-latest
#         steps:
#             - run: echo "${EXAMPLE}"
#             - env:
#                 EXAMPLE: Defined bt step level
#               run: echo "${EXAMPLE}"

##　コード3.4
# name: Itermediate environment variables
# on: push
# jobs: 
#     print:
#         runs-on: ubuntu-latest
#         env:
#             ACTOR: ${{ github.actor }}
#         steps:
#             - run: echo "${ACTOR}"]

## コード3.5
# name: Variables
# on: push
# jobs:
#     print:
#         runs-on: ubuntu-latest
#         env:
#             USERNAME: ${{ vars.USERNAME }}
#         steps:
#             - run: echo "${USERNAME}"

## コード3.6
# name: Secrets
# on: push
# jobs:
#     print:
#         runs-on: ubuntu-latest
#         env:
#             PASSWORD: ${{secrets.PASSWORD}}
#         steps:
#             - run: echo "${PASSWORD}"
#             - run: echo "${PASSWORD:0:1} ${PASSWORD#?}"

# ## コード 3.7
# name: Literals
# on: push
# jobs:
#     print:
#         runs-on: ubuntu-latest
#         steps: 
#             - run: printenv | grep 'LITERAL_'
#               env:
#                 LITERAL_NULL: ${{ null }}
#                 LITERAL_BOOLEAN: ${{ true }}
#                 LITERAL_NUMBER: ${{ 12345 }}
#                 LITERAL_STRING: ${{ 'Hello' }}
#                 LITERAL_OMIT_STRING: World

## コード 3.8
# name: Compare function
# on: push
# jobs:
#     compare:
#         runs-on: ubuntu-latest
#         steps: 
#             - run: printenv | grep '_FUNC'
#               env:
#                 CONTAINS_FUNC: ${{ contains('Hello', 'ell') }}
#                 STARTS_WITH_FUNC: ${{ startsWith('Hello', 'He')}}
#                 ENDS_WITH_FUNC: ${{ endsWith('Hello', 'lo')}}


## コード 3.9
# name: Generate function
# on: push
# jobs:
#     compare:
#         runs-on: ubuntu-latest
#         steps: 
#             - run: printenv | grep '_FUNC'
#               env:
#                 FORMAT_FUNC: ${{ format('{0},{1}', 'Hi', 'world')}}
#                 JOIN_FUNC: ${{ join(github.event.*.html_url, ',')}}

##コード 3.10
# name: JSON function
# on: push
# jobs:
#     dump:
#         runs-on: ubuntu-latest
#         steps: 
#             - run: echo "${CONTEXT}"
#               env:
#                 CONTEXT: ${{ toJSON(github) }}

##コード 3.11
# name: Hash function
# on: push
# jobs:
#     hash:
#         runs-on: ubuntu-latest
#         steps:
#             - uses: actions/checkout@v4 
#             - run: echo "${HASH}"
#               env:
#                 HASH: ${{ hashFiles('.github/workflows/*.yaml') }}

#コード 3.12
# name: Conditions
# on: push
# jobs:
#     skip-or-run:
#         runs-on: ubuntu-latest
#         steps:
#             - run: echo "Hello"
#               if: ${{ contains(github.run_id, '1') }}

#コード 3.13
# name: Staus check function
# on: push
# jobs:
#     fail:
#         runs-on: ubuntu-latest
#         steps:
#             - run: exit 1
#             - run: echo "Hello"
#               if: ${{ failure() }}

#コード 3.14
# name: Conditions workflow
# on: push
# jobs:
#     skip-or-run:
#         if: ${{ github.actor == 'octocat' }}
#         runs-on: ubuntu-latest
#         steps:
#             - run: echo "Hello"


#コード 3.18
# name: GITHUB_OUTPUT
# on: push
# jobs:
#     share:
#         runs-on: ubuntu-latest
#         steps:
#           - id: source
#             run: echo "result=Hello" >> "${GITHUB_OUTPUT}"
#           - env:
#               RESULT: ${{ steps.source.outputs.result }}
#             run: echo "${RESULT}"


#コード 3.18
# name: Comment
# on: pull_request
# jobs:
#   commit:
#     runs-on: ubuntu-latest
#     permissions:
#       pull-requests: write 
#       contents: read
#     steps:
#       - uses: actions/checkout@v4
#       - run: gh pr comment "${GITHUB_HEAD_REF}" --body "Hello, ${GITHUB_ACTOR}"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#コード 3.18
name: Test
on: 
  pull_request:
    paths:['go/**/*.go']
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version:'1.22'
      - run: go test go/excellet/*.go
